services:
  api: &api
    build:
      context: .
      dockerfile: ./docker/production/django/Dockerfile
    image: kpi_notify_api
    container_name: kpi_notify_api
    restart: unless-stopped
    volumes:
      - ./api:/app:z
      - ./api/staticfiles:/app/staticfiles
      - ./api/media:/app/media
    expose:
      - "8000"
    env_file:
      - ./api/.envs/.env.production
    depends_on:
      - postgres
      - redis
    command: /start
    networks:
      - kpi_notify_nw

  postgres:
    build:
      context: .
      dockerfile: ./docker/production/postgres/Dockerfile
    image: kpi_notify_postgres
    container_name: kpi_notify_postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    volumes:
      - kpi_notify_postgres_data:/var/lib/postgresql/data
    env_file:
      - ./api/.envs/.env.production
    networks:
      - kpi_notify_nw

  redis:
    image: redis:7.0-alpine3.19
    command: redis-server --appendonly yes
    container_name: kpi_notify_redis
    restart: unless-stopped
    volumes:
      - kpi_notify_redis_data:/data
    networks:
      - kpi_notify_nw

  celery_worker:
    <<: *api
    image: kpi_notify_celery_worker
    container_name: kpi_notify_celery_worker
    command: /start-celery-worker
    restart: unless-stopped
    ports: [ ]

  flower:
    <<: *api
    image: kpi_notify_flower
    container_name: kpi_notify_flower
    restart: unless-stopped
    ports:
      - "5555:5555"
    command: /start-flower

  telegram_bot:
    <<: *api
    image: kpi_notify_telegram_bot
    container_name: kpi_notify_telegram_bot
    command: /start-telegram-bot
    restart: unless-stopped
    ports: [ ]

  client:
    build:
      context: .
      dockerfile: ./docker/production/client/Dockerfile
    image: kpi_notify_client
    container_name: kpi_notify_client
    restart: unless-stopped
    expose:
      - "3000"
    working_dir: /app
    env_file:
      - "./client/.env.production"
    depends_on:
      - api
    networks:
      - kpi_notify_nw

  nginx:
    build:
      context: ./docker/production/nginx
      dockerfile: Dockerfile
    image: kpi_notify_nginx
    container_name: kpi_notify_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./api/staticfiles:/app/staticfiles
      - ./api/media:/app/media
      - ./docker/production/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
        - /etc/letsencrypt:/etc/letsencrypt:ro
    depends_on:
      - api
      - client
    networks:
      - kpi_notify_nw

networks:
  kpi_notify_nw:
    external: true

volumes:
  kpi_notify_postgres_data: { }
  kpi_notify_redis_data: { }
